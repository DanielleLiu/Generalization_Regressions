%Model fit per muscle, this script requires the pwd is the folder that
%contains the .h5 and .mat file generated by preProcessingLinearModel.m and
%gettingCs_dynamicsFeedback.m

%% Adding path 

% addpath(genpath('/Users/dulcemariscal/Documents/GitHub/Generalization_Regressions'))
% addpath(genpath('/Users/dulcemariscal/Documents/GitHub/labTools'))
% addpath(genpath('/Users/dulcemariscal/Documents/GitHub/LongAdaptation'))
% addpath(genpath('/Users/dulcemariscal/Documents/GitHub/R01'))
% addpath(genpath('/Users/dulcemzariscal/Documents/GitHub/splitbelt-EMG-adaptation'))
% addpath(genpath('/Users/dulcemariscal/Documents/GitHub/EMG-LTI-SSM'))
% addpath(genpath('/Users/dulcemariscal/Documents/GitHub/matlab-linsys'))
% rmpath(genpath('/Users/dulcezmariscal/Documents/GitHub/PittSMLlab'))

%% Load real data from previous steps:
if exist('loadDataByStep','var') && loadDataByStep %this should only be true if running scripts step by step; 
    %default false (e.g., if the var doesn't exist, dont' load data)
    %and this variable is set somewhere outside of this script.
% clear all;clc;close all
% Free model - Linear regression - Asymmetry with baseline
% This is just the saved data - Update accrodingly 
groupID = 'AUF';
if contains(groupID,{'BATR','BATS'})   
    type= 2; %1 testing; 2 training ; 3 both groups
    %EMG Data 
    if type==1 %Testing
        fname='dynamicsData_BATS_subj_12_RemoveBadMuscles1_splits_0_WithPost2V2_WogBaseline.h5'
    elseif type==2 %Training
        %posterior muscles
        % fname='dynamicsData_BATR_subj_12_RemoveBadMuscles1_splits_0_PosteriorMuscles.h5';
    % fname='dynamicsData_BATR_subj_12_RemoveBadMuscles1_splits_0_V4.h5'
%     fname='dynamicsData_BATR_subj_12_RemoveBadMuscles1_splits_0_WithPost2V2.h5
    fname='dynamicsData_BATR_subj_1_RemoveBadMuscles1.h5'
elseif type==3 %Both groups
    fname='dynamicsData_BAT_subj_24_RemoveBadMuscles1_splits_0_V4.h5'
    end

    %%%%%%%% Regressors

    %BATR
    % load BATR_12_AsymC16_ShortPertubations_RemovedBadMuscle_1.mat
    % load BATR_12_IndvLegsC16_ShortPertubations_RemovedBadMuscle_1RemovBias_0.mat

    %BATS
    % load BATS_12_IndvLegsC17_ShortPertubations_RemovedBadMuscle_1RemovBias_0.mat

    % ALL 24 participants
    % load BAT_24_AsymC16_ShortPertubations_RemovedBadMuscle_1.mat
    load BATR_1_IndvLegsC17_ShortPertubations_RemovedBadMuscle_1RemoveBias_0_PosteriorMuscles.mat %should always load the one with removeBias_0
    % load BAT_24_IndvLegsC17_ShortPertubations_RemovedBadMuscle_1RemoveBias_0_PosteriorMuscles.mat
elseif contains(groupID,'AUF')
    [groupDataPath, ~, ~, ~, ~] = setupDataPath('ParamsForGroupPlot', 'V02', '', '');
    cd(groupDataPath)
    fname = 'dynamicsData_AUF_subj_22_RemoveBadMuscles0.h5'; %h5 file name
    load AUFV02_22_IndvLegsC18_ShortPertubations_RemovedBadMuscle_0RemoveBias_0.mat
end
EMGdata=h5read(fname,'/EMGdata'); %#stride x 336 (12 interval x 28 muscles). #of stride is in order of each epoch (base, adapt, ogpost, tmpost)
end

%% set up epoch strides
if contains(groupID,{'BATR','BATS'})
    postAdaptStartIdx = 481; %AUF: 931
    postAdaptIndex = 481:485;%AUF: 931:935; %Dulce's protocol did 481:485 here.
    earlyAdaIdx = 41:45
    lateAdaIdx = 440:480
    %Dulce protocl strides=[-40 440 200 200]; %Number per strides per condition % cond={'TM base','Adaptation','Post 1', 'Post 2'}; %Conditions for this group
elseif contains(groupID,'AUF')
    postAdaptStartIdx = 931 %AUF: 931
    postAdaptIndex = postAdaptStartIdx:postAdaptStartIdx+4%AUF: 931:935; %Dulce's protocol did 481:485 here.
    earlyAdaIdx = 41:45
    lateAdaIdx = 921:930 %last 11 strides.
    %AUF protocl: strides=[-40 890 440 140]; %Number per strides per condition % cond={'TMBase','Adaptation','OGPost', 'TMPost'}; %Conditions for this group
end
%% Getting the data
binwith=10;
%from the stride x 336 data, get Y (group summarized data,#strides x 336 (12interval x 28 muscles)), Yasym
%(fast-slow), U (input = belt speed), Ysum =left+right, Yinv = individual
%data (3D: stride x 336 x subjects), and labels (28: slow then fast)
if exist('fname','var') %saved file, load file
    [Y,Yasym,U,~,Ysum,Yinv,labels]=groupDataToMatrixForm_Update(1:size(EMGdata,3),fname,0); %last flag: whether of not to take sqrt of the data.
else %not loadDataByStep, batch processing multiple subjects in a row, without saving intermediate data.
    [Y,Yasym,U,~,Ysum,Yinv,labels]=groupDataToMatrixForm_Update(1:size(EMGdata,3),[],0,EMGdata, speedDiff, breaks,labels); %last flag: whether of not to take sqrt of the data.
end
Yasym=Y; %not doing asymmetry analysis, Yasym variable is used later for regression, assign it to the group summarized Y.
% Yasym=Yinv(:,:,1); %getting the last subject?
Uf=[U;ones(size(U))];

%% Organizing the data
%ep: earlyOrLate: 1 means early
%Pick the conditions that we are going to use for the regression
if contains(groupID,'BAT')
    reactive=find(strcmp(epochOfInterest,'Ramp')==1); %last 10 strides excluding the last 5 from Pos short ramp condition (already reached full slipt)
    context= find(strcmp(epochOfInterest,'Optimal')==1);%last 40 excluding last 5 in the split pos 18 condition (last split, 150 strides splits after 9 short exploration)
    reactive2=find(strcmp(epochOfInterest,'NegShort_{late}')==1); %last 10 excluding last 5 in neg short (full neg split w/o ramp)
elseif contains(groupID,'AUF')
    reactive=find(strcmp(epochOfInterest,'PosShort_{la}')==1); %last 10 strides excluding the last 5 from Pos short ramp condition (already reached full slipt)
    context= find(strcmp(epochOfInterest,'Adaptation_{SS}')==1);%last 40 excluding last 5 in the split pos 18 condition (last split, 150 strides splits after 9 short exploration)
    reactive2=find(strcmp(epochOfInterest,'NegShort_{la}')==1); %last 10 excluding last 5 in neg short (full neg split w/o ramp)
end
removebaseline=1; %Remove bias flag


Casym=[C(:,reactive2) C(:,context)]; % EMGreactive and EMGcontext
Ymodel=Yasym';  % Transpose the EMG data to match equations


if removebaseline==1
    bias=nanmean(Yasym(1:40,:)); %Computing the bias, pick 5-30 strides knowing that the data starts with the last 40 strides (excluding last 5) of TMBase (from preProcessingLinearModel)
    
    warning('Removing bias from Y only. Check that C has proper bias removed from previous step. ')
%     Casym=Casym-bias'; %Removing bias from the regressors; if removeBias is already true in gettingCs_dynamicsFeedback, this would be problematics (removing bias twice)
%notice that C and y should remove different bias. Y if focusing on post
%adaptation should remove OGBase whereas C are TM conditions and should
%remove TMBase. Relying on previous step to remove proper bias.
    Ymodel=Ymodel-bias'; %removing bias from the data
    
    %Organizing the data per muscle
    Cmuscles=reshape(Casym',2,12,size(Yasym,2)/12); %muscles for regressors 2 number of regressors x 12 number of phase of the gait cycle x #of muscles
    %update stride index here to match your study
    Ymuscles=reshape(Ymodel(:,:)',[],12,size(Yasym,2)/12); %reorganize to #strides x 12sub interval x #muscles, pick first 680 strides (40 baseline, 440adaptation, 1st post)
end

%% Linear regression individual muscles
reconstruction_indv=[]; %yhat per muscl,, final dim: 336 (12 phase for each 28 muscles) x #strides
data=[]; %actual y, final dim: 336 (12 phase for each 28 muscles) x #strides
%data is the same as Ymuscles reshaped in 2D.
C_indv=[]; %unit regressor per muscle, final dim: 336  (12 phase for each 28 muscles) x 2 (regressors)
X_indv=[]; %weights per muscel, final dim: 2x total strides (#strides x #muscles, e.g.,: 680strides * 28 muscles=19040)

for i=1:28
    C_unit(:,:,i)=Cmuscles(:,:,i)'./vecnorm(Cmuscles(:,:,i)'); %Getting the unit vector of the regressors, dim:12(interval)x2(regressors)
    if all(isnan(Cmuscles(:,:,i)))
        C_unit_inverse(:,:,i)=C_unit(:,:,i); %carry the nan alone
    else %invserve only can be calculated for non-nan values.
        C_unit_inverse(:,:,i)=pinv(C_unit(:,:,i)'); % Getting the pseudo-inverse, dim: 12x2
    end
    weights(:,:,i) =C_unit_inverse(:,:,i)'*Ymuscles(:,:,i)'; %x= y/C = y*inv(C), here x = coefficients or weights: 2 (regressors) x #strides x muscles (get populated over the for loop).
    yhat(:,:,i)=  C_unit(:,:,i)* weights(:,:,i) ; %yhat, dim: 12(interval) x #strides
    weights_tranp(:,:,i)=weights(:,:,i)'; %transposing the dynamics vector, dim: #strides x 2(regressors) x #muscles
    model{i}.C=C_unit(:,:,i); %saving the regressors. Yhis is necesary for the plotting funciton, 1struct per muscle
    
    reconstruction_indv =[ reconstruction_indv ; yhat(:,:,i)]; % Concatenating the data reconstructed, 12 x #strides
    data =[ data ; Ymuscles(:,:,i)'];  % Concatenating the data, each time add 12x#strides
    C_indv=[C_indv;C_unit(:,:,i)];  % Concatenating the regressors for each muscles, each time append 12x2(regressors)
    X_indv=[X_indv,weights(:,:,i) ];  % Concatenating the dynamics (weights), each time append 12x#strides
    
    % Checking for colinearity and correlation between the regresssions
    corr_btw_Cs=corrcoef(model{i}.C); %returns 2x2 matrix (2 regressor)
    correlation(i,1)=corr_btw_Cs(2); %get correlation coefficients.
%     temp10(i,:)=vif([model{i}.C nanmean(Ymuscles(481:491,:,i))']); %Variance inflation
%     temp5=vif([model{i}.C]);
    impact(i,:)=vif([model{i}.C]); %vif btw regressors. usually >10 is considered high colinearity
end

% index=find(impact>5); % fidn the regressor with high colinearity

Uf=Uf(:,1:size(weights_tranp,1)); %get speed difference for the #strides seletected, determined by ymuscles
% Uf=Uf(:,1:size(weights_tranp,1)); %repeat

%%  Plotting 
model_allMuscles{1}.C=C_indv; %Save regressors for models pulled from all muscles.
model_allMuscles{1}.Out= reconstruction_indv; %Save all reconstructions of the indiivudal muscles to the model format for plotting 
analysis=0; %Flag asking if you want to run the analysis
isF=0; %Flag for fast leg

Res=data-reconstruction_indv;
R2 = 1 - nansum((Res).^2)./nansum((data- nanmean(data)).^2);

%generate a figure like pablo's, visualize states' dynamics, state vector
%(Cs), data, reconstruction, errors at certain time stamps.
legacy_vizSingleModel_FreeModel_ShortAdaptation_IndvLeg2(model_allMuscles{1},data,Uf,analysis,[],isF)
set(gcf,'color','w')
% legacy_vizSingleModel_FreeModel_ShortAdaptation_IndvLeg(model2{1},data,Uf,analysis,[],isF)
% save('BATS_indv_muscles.mat','X2asym')
    
%% Plotting time course for individual muscles
analysis=0 %don't run analysis for the call to the legacy_vis function.

for i=2
%pick the muscle that you want
    
    % Pick the data that you want to plot 
    %    Xasym=[temp2(1:40,:,i);nan(1,size(temp2,2));temp2(41:480,:,i);nan(1,size(temp2,2));temp2(481:end,:,i)];
    %Update stride index here 
    currWeight=[weights_tranp(postAdaptStartIdx:end,:,i)]; %1st dimension = strides, get post-adapt strides, this assumes 40 base, 440 adaptation
    %for AUF protocol chose 40 base and 890 adaptation
    %      Xasym=[temp2(1:200,:,i)];
    % Xasym=[X2asym(1:40,:);nan(1,size(X2asym,2));X2asym(41:80,:);...
    %     nan(1,size(X2asym,2));X2asym(81:520,:);nan(1,size(X2asym,2));X2asym(521:end,:)];
    % Xasym=[X2asym(681:843,:);nan(1,size(X2asym,2))];
    
    figure
    subplot(2,1,1)
    hold on
    % scatter(1:length(movmean(Xasym(:,1),binwith)), movmean(Xasym(:,1),binwith),10,'k','filled')
    scatter(1:length(movmean(currWeight(:,1),binwith)), movmean(currWeight(:,1),binwith),'filled','MarkerFaceColor',"#EDB120") %"#77AC30" )%
        
    % legend('Baseline','AutoUpdate','off')
    legend('Negative')
%     title(labels(i).Data)
    title(labels(i))
    %     legend('Removal Perturbation','AutoUpdate','off')
    % uistack(pp,'bottom')
    yline(0)
    ylabel({'Reactive';'(A.U)'})
    %     ylabel({'Removal';'(A.U)'})
    xlabel('strides')
    
    if size(weights_tranp(:,:,i),2)>=2 %if more than 1 regressor, plot the next regressor.
        % figure
        subplot(2,1,2)
        hold on
        scatter(1:length(movmean(currWeight(:,2),binwith)), movmean(currWeight(:,2),binwith),'filled','MarkerFaceColor'," #00008B")
        %
        legend('Contextual')
        % % legend('Switch','AutoUpdate','off')
        % % uistack(pp,'bottom')
        yline(0)
        ylabel({'Contextual';'(A.U)'})
        xlabel('strides')
    end
    if i<=14
        isF=0;
    else
        isF=1;
    end
    set(gcf,'color','w')
    % Plot the time course plus the regressors per muscle (similar to
    % figure in the previous section (plot states, dynamics, data, fit, residuals, etc. but 1 muscle at a time)
%     legacy_vizSingleModel_FreeModel_ShortAdaptation_IndvLeg(model{i},Ymuscles(:,:,i)',Uf,analysis,{labels(i).Data(2:end-1)},isF)
    legacy_vizSingleModel_FreeModel_ShortAdaptation_IndvLeg(model{i},Ymuscles(:,:,i)',Uf,analysis,labels{i},isF)
    set(gcf,'color','w')
    
    
end

 
%% Geting the average of the first 5 strides post-adaptation per muscle
figure
hold on
for i=1:28
    if i<15
        %save a handle of the figure object itself. Just need 1 handle per
        %leg, bc same color is sued per leg. Li{1} is overriden each time
        %for i =1:14 but it's ok. 
        %Update stride index here 
        %strides=[-40 890 440 140]; %Number per strides per condition; cond={'TMBase','Adaptation','OGPost', 'TMPost'}; %Conditions for this group
        Li{1}=scatter(nanmean(weights_tranp(postAdaptIndex,1,i)),nanmean(weights_tranp(postAdaptIndex,2,i)),100,"filled",'MarkerFaceColor', 'b');
%         text(nanmean(weights_tranp(postAdaptIndex,1,i)),nanmean(weights_tranp(postAdaptIndex,2,i)),{labels(i).Data(2:end-1)}) %label the muscle at the location of the scatter point.
        text(nanmean(weights_tranp(postAdaptIndex,1,i)),nanmean(weights_tranp(postAdaptIndex,2,i)),labels{i}) %label the muscle at the location of the scatter point.
    else
        %Update stride index here 
        Li{2}=scatter(nanmean(weights_tranp(postAdaptIndex,1,i)),nanmean(weights_tranp(postAdaptIndex,2,i)),100,"filled",'MarkerFaceColor', 'r')  ;
%         text(nanmean(weights_tranp(postAdaptIndex,1,i)),nanmean(weights_tranp(postAdaptIndex,2,i)),{labels(i).Data(2:end-1)})
        text(nanmean(weights_tranp(postAdaptIndex,1,i)),nanmean(weights_tranp(postAdaptIndex,2,i)),labels{i})
    end
    
end
legend([Li{:}],['Slow';'Fast'])
ylabel({'Contextual';'A.U'})
xlabel({'Reactive';'A.U'})
title('EarlyPost1')
% xlim([-0.3 1.4])
% ylim([-0.3 1.4])
set(gcf,'color','w')
return
%% Geeting the average of Early Adapt and lateAdapt
% figure
% hold on
% 
% for i=1:28
%     if i<15
%         Li{1}=scatter(nanmean(weights_tranp(earlyAdaIdx,1,i)),nanmean(weights_tranp(earlyAdaIdx,2,i)),100,"filled",'MarkerFaceColor', 'b');
%         text(nanmean(weights_tranp(earlyAdaIdx,1,i)),nanmean(weights_tranp(earlyAdaIdx,2,i)),{labels(i).Data(2:end-1)})
%     else
%         Li{2}=scatter(nanmean(weights_tranp(earlyAdaIdx,1,i)),nanmean(weights_tranp(earlyAdaIdx,2,i)),100,"filled",'MarkerFaceColor', 'r')  ;
%         text(nanmean(weights_tranp(earlyAdaIdx,1,i)),nanmean(weights_tranp(earlyAdaIdx,2,i)),{labels(i).Data(2:end-1)})
%     end
%     
% end
% legend([Li{:}],['Slow';'Fast'])
% ylabel({'Contextual';'A.U'})
% xlabel({'Reactive';'A.U'})
% % axis square
% xlim([-1 3])
% ylim([-1 1])
% 
% title('EarlyAdapt')
% set(gcf,'color','w')
% 
% 
% figure
% hold on
% for i=1:28
%     if i<15
%         Li{1}=scatter(nanmean(weights_tranp(lateAdaIdx,1,i)),nanmean(weights_tranp(lateAdaIdx,2,i)),100,"filled",'MarkerFaceColor', 'b');
%         text(nanmean(weights_tranp(lateAdaIdx,1,i)),nanmean(weights_tranp(lateAdaIdx,2,i)),{labels(i).Data(2:end-1)})
%     else
%         Li{2}=scatter(nanmean(weights_tranp(lateAdaIdx,1,i)),nanmean(weights_tranp(lateAdaIdx,2,i)),100,"filled",'MarkerFaceColor', 'r')  ;
%         text(nanmean(weights_tranp(lateAdaIdx,1,i)),nanmean(weights_tranp(lateAdaIdx,2,i)),{labels(i).Data(2:end-1)})
%     end
%     
% end
% legend([Li{:}],['Slow';'Fast'])
% ylabel({'Contextual';'A.U'})
% xlabel({'Reactive';'A.U'})
% axis square
% title('LateAdapt')
% set(gcf,'color','w')
% xlim([-.1 .85])
% ylim([-.1 .85])

%% save figures
% saveResAndFigures = false;
if strcmp(groupID,'AUF') %group analysis.
    resDir = 'X:\Shuqi\NirsAutomaticityStudy\Data\GroupResults\Group22Sub\EMG\V02\';
end
if exist('saveResAndFigures','var') && saveResAndFigures
    f = figure(1);
    saveas(f,[resDir 'legacy_allmuscles.fig']);saveas(f,[resDir 'legacy_allmuscles.png']);
    f = figure(2);
    saveas(f,[resDir 'example_muscle_timecourse.png']);
    f = figure(3);
    saveas(f,[resDir 'legacy_example_muscle.fig']);saveas(f,[resDir 'legacy_example_muscle.png']);
    f = figure(4);
    saveas(f,[resDir 'weights_postAdapt1.png']);
    f = figure(5);
    saveas(f,[resDir 'weights_earlyAdapt.png']);
    f = figure(6);
    saveas(f,[resDir 'weights_lateAdapt.png']);
    save('regression_weights.mat','weights_tranp','C_indv','Ymuscles')
end

%% Comparing individual analysis with the leg specific analysis

Cslow=[Casym(1:size(C,1)/2,1)  Casym(1:size(C,1)/2,2)]./vecnorm([Casym(1:size(C,1)/2,1)  Casym(1:size(C,1)/2,2)]); %SLOW
Cfast=[Casym(1+size(C,1)/2:end,1)  Casym(1+size(C,1)/2:end,2)]./vecnorm([Casym(1+size(C,1)/2:end,1)  Casym(1+size(C,1)/2:end,2)]); %FAST

Ymodel=Ymodel';
Yslow=Ymodel(1:680,1:size(Ymodel,2)/2); %SLOW
Yfast=Ymodel(1:680,size(Ymodel,2)/2+1:end); %FAST



Cinv=pinv(Cslow);
Xslow = Cinv*Yslow'; %x= y/C
hatYslow=  Cslow *Xslow ; %yhat = C

% hatYslow= hatYslow';

Cinv=pinv(Cfast);
Xfast = Cinv*Yfast'; %x= y/C
hatYfast=  Cfast *Xfast ; %yhat = C

% hatYfast=hatYfast;
Yfast=Yfast';
Yslow=Yslow';

% Variance explained

ex2=[0.2314    0.2980    0.7529];
ex1=[0.7255    0.0863    0.1608];
mid=ones(1,3);
N=100;
gamma=1.5; %gamma > 1 expands the white (mid) part of the map, 'hiding' low values. Gamma<1 does the opposite
gamma=1;
map=[flipud(mid+ (ex1-mid).*([1:N]'/N).^gamma); mid; (mid+ (ex2-mid).*([1:N]'/N).^gamma)];



%% Variance all muscles
Rsquared_slow2= my_Rsquared_coeff(Yslow,hatYslow);
Rsquared_fast2 = my_Rsquared_coeff(Yfast,hatYfast);

Rsquared_slow_unit2 = my_Rsquared_coeff(Yslow,reconstruction_indv(1:168,:));
Rsquared_fast_unit2 = my_Rsquared_coeff(Yfast,reconstruction_indv(169:end,:));

figure()
plot(Rsquared_slow2)
hold on
plot(Rsquared_slow_unit2)
legend('Per leg','Per muscle')

figure
plot(Rsquared_fast2)
hold on
plot(Rsquared_fast_unit2)
legend('Per leg','Per muscle')

% both legs
Rsquared_both= my_Rsquared_coeff([Yslow(:,:);Yfast(:,:)],[hatYslow(:,:);hatYfast(:,:)]);
Rsquared_both_unit = my_Rsquared_coeff([Yslow(:,:);Yfast(:,:)],reconstruction_indv(:,:));

figure
plot(Rsquared_both)
hold on
plot(Rsquared_both_unit)
legend('Per leg','Per muscle')
title('Both leg')
set(gcf,'color','w')
% figure(3)
% ytl={'GLU','TFL','HIP','RF','VL','VM','BF', 'SEMB','SEMT','MG','LG','SOL','PER','TA'};
%%
%% Calculating the R squared per muscle
% mm= 0:12:168;
% mm2=1:12:168;
% for m=1:14
%     Rsquared_slow(m,:) = my_Rsquared_coeff(Yslow(mm2(m):mm(m+1),:),hatYslow(mm2(m):mm(m+1),:));
%     Rsquared_fast(m,:) = my_Rsquared_coeff(Yfast(mm2(m):mm(m+1),:),hatYfast(mm2(m):mm(m+1),:));
%     
%     Rsquared_slow_unit(m,:) = my_Rsquared_coeff(Ymuscles(:,:,m)',Y2asym(:,:,m));
%     Rsquared_fast_unit(m,:) = my_Rsquared_coeff(Ymuscles(:,:,m+14)',Y2asym(:,:,m+14));
%     
% end
% % figure
% muscleOrder={'GLU','TFL','HIP','RF','VL','VM','BF', 'SEMB','SEMT','MG','LG','SOL','PER','TA'};
% ytl= defineMuscleListV2(muscleOrder); %List of muscle
% % ytl={'TA', 'PER', 'SOL', 'LG', 'MG', 'BF', 'SEMB', 'SEMT', 'VM', 'VL', 'RF', 'HIP','TFL', 'GLU'};
% % ytl(end:-1:1) = ytl(:);
% binw=5;
% 
% mtp=10;
% for m=mtp
%     %     figure
%     %      imagesc(nanmean(Yslow(mm2(m):mm(m+1),481:485),2)',[-1 ,1])
%     %      colormap(flipud(map))
%     figure
%     %     subplot(14,1,m)
%     hold on
%     aux1=conv(Rsquared_slow(m,:),ones(1,binw)/binw,'valid'); %Smoothing
%     plot(aux1,'LineWidth',2,'DisplayName','Per leg','Color',"#0072BD") ;
%     
%     aux1=conv(Rsquared_slow_unit(m,:),ones(1,binw)/binw,'valid'); %Smoothing
%     plot(aux1,'LineWidth',2,'DisplayName','Per muscle','Color',"#A2142F") ;
%     
%     %     plot(movmean(muscles_slow(m,:),5))
%     %     plot(movmean(muscles_slow_unit(m,:),5))
%     %     scatter(1:length(muscles(m,:)),movmean(muscles(m,:),5),'filled')
%     %     legend({'Per leg';'Per muscle'},'AutoUpdate','off');
%     legend('Location','NorthEastOutside','AutoUpdate','off')
%     ylabel(ytl{m+14})
%     %     yline(nanmean(muscles_slow(m,10:30)))
%     
%     pp=patch([40 480 480 40],[-0.5 -0.5 1 1],.7*ones(1,3),'FaceAlpha',.2,'EdgeColor','none');
%     
%     %     pp=patch([0 440  440 0],[-0.5 -0.5 1 1],.7*ones(1,3),'FaceAlpha',.2,'EdgeColor','none');
%     
%     uistack(pp,'bottom')
% end
% set(gcf,'color','w')
% 
% % figure
% for m=mtp
%     %     subplot(14,1,m)
%     figure
%     hold on
%     aux1=conv(Rsquared_fast(m,:),ones(1,binw)/binw,'valid'); %Smoothing
%     plot(aux1,'LineWidth',2,'DisplayName','Per leg','Color',"#0072BD") ;
%     
%     aux1=conv(Rsquared_fast_unit(m,:),ones(1,binw)/binw,'valid'); %Smoothing
%     plot(aux1,'LineWidth',2,'DisplayName','Per muscle','Color',"#A2142F") ;
%     %         plot(movmean(muscles_fast(m,:),5))
%     %         plot(movmean(muscles_fast_unit(m,:),5))
%     %     scatter(1:length(muscles(m,:)),movmean(muscles(m,:),5),'filled')
%     %     legend({'Per leg';'Per muscle'},'AutoUpdate','off');
%     
%     legend('Location','NorthEastOutside','AutoUpdate','off')
%     ylabel(ytl{m})
%     %     yline(nanmean(muscles_fast(m,10:30)))
%     pp=patch([40 480 480 40],[-0.5 -0.5 1 1],.7*ones(1,3),'FaceAlpha',.2,'EdgeColor','none');
%     %     pp=patch([0 440  440 0],[-0.5 -0.5 1 1],.7*ones(1,3),'FaceAlpha',.2,'EdgeColor','none');
%     
%     uistack(pp,'bottom')
% end
% set(gcf,'color','w')